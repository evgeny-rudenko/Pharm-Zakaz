/*
 * API для аптечных сетей
 *
 * Авторизация по токену, используйте заголовок          Authorization: Bearer токен         пример:          Authorization: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU          Для того чтобы работать с API через интерфейс swagger (ниже, по кнопке Try it out),         нажмите кнопку Authorize и укажите токен в формате Bearer токен.         Пример: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU 
 *
 * The version of the OpenAPI document: v2
 * Contact: info@pharm-zakaz.ru
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOf' DefaultApi
            //Assert.IsInstanceOf(typeof(DefaultApi), instance);
        }

        
        /// <summary>
        /// Test DistributorsList
        /// </summary>
        [Test]
        public void DistributorsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.DistributorsList();
            //Assert.IsInstanceOf(typeof(ListDistributors), response, "response is ListDistributors");
        }
        
        /// <summary>
        /// Test OrderCreate
        /// </summary>
        [Test]
        public void OrderCreateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //CreateOrder data = null;
            //var response = instance.OrderCreate(data);
            //Assert.IsInstanceOf(typeof(ResponseOrder), response, "response is ResponseOrder");
        }
        
        /// <summary>
        /// Test OrderRead
        /// </summary>
        [Test]
        public void OrderReadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //var response = instance.OrderRead(id);
            //Assert.IsInstanceOf(typeof(DetailedOrder), response, "response is DetailedOrder");
        }
        
        /// <summary>
        /// Test OrdersList
        /// </summary>
        [Test]
        public void OrdersListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? orderId = null;
            //var response = instance.OrdersList(orderId);
            //Assert.IsInstanceOf(typeof(Order), response, "response is Order");
        }
        
        /// <summary>
        /// Test ProductsList
        /// </summary>
        [Test]
        public void ProductsListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? storeId = null;
            //string uniqueId = null;
            //int? distributorId = null;
            //var response = instance.ProductsList(storeId, uniqueId, distributorId);
            //Assert.IsInstanceOf(typeof(ProductList), response, "response is ProductList");
        }
        
        /// <summary>
        /// Test StoresList
        /// </summary>
        [Test]
        public void StoresListTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.StoresList();
            //Assert.IsInstanceOf(typeof(Store), response, "response is Store");
        }
        
    }

}
