/*
 * API для аптечных сетей
 *
 * Авторизация по токену, используйте заголовок          Authorization: Bearer токен         пример:          Authorization: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU          Для того чтобы работать с API через интерфейс swagger (ниже, по кнопке Try it out),         нажмите кнопку Authorize и укажите токен в формате Bearer токен.         Пример: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU 
 *
 * The version of the OpenAPI document: v2
 * Contact: info@pharm-zakaz.ru
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DetailedOrder
    /// </summary>
    [DataContract]
    public partial class DetailedOrder :  IEquatable<DetailedOrder>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedOrder" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DetailedOrder() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DetailedOrder" /> class.
        /// </summary>
        /// <param name="orderId">orderId (required).</param>
        /// <param name="orderCode">orderCode (required).</param>
        /// <param name="distributorOrderId">distributorOrderId (required).</param>
        /// <param name="statusDelivery">statusDelivery (required).</param>
        /// <param name="orderSumWithVat">orderSumWithVat (required).</param>
        /// <param name="statusPay">statusPay (required).</param>
        /// <param name="storeId">storeId (required).</param>
        /// <param name="distributorId">distributorId (required).</param>
        /// <param name="orderSum">orderSum (required).</param>
        /// <param name="items">items (required).</param>
        public DetailedOrder(int orderId = default(int), string orderCode = default(string), string distributorOrderId = default(string), string statusDelivery = default(string), decimal orderSumWithVat = default(decimal), string statusPay = default(string), int storeId = default(int), int distributorId = default(int), decimal orderSum = default(decimal), List<OrderItem> items = default(List<OrderItem>))
        {
            // to ensure "orderId" is required (not null)
            if (orderId == null)
            {
                throw new InvalidDataException("orderId is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.OrderId = orderId;
            }

            // to ensure "orderCode" is required (not null)
            if (orderCode == null)
            {
                throw new InvalidDataException("orderCode is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.OrderCode = orderCode;
            }

            // to ensure "distributorOrderId" is required (not null)
            if (distributorOrderId == null)
            {
                throw new InvalidDataException("distributorOrderId is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.DistributorOrderId = distributorOrderId;
            }

            // to ensure "statusDelivery" is required (not null)
            if (statusDelivery == null)
            {
                throw new InvalidDataException("statusDelivery is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.StatusDelivery = statusDelivery;
            }

            // to ensure "orderSumWithVat" is required (not null)
            if (orderSumWithVat == null)
            {
                throw new InvalidDataException("orderSumWithVat is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.OrderSumWithVat = orderSumWithVat;
            }

            // to ensure "statusPay" is required (not null)
            if (statusPay == null)
            {
                throw new InvalidDataException("statusPay is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.StatusPay = statusPay;
            }

            // to ensure "storeId" is required (not null)
            if (storeId == null)
            {
                throw new InvalidDataException("storeId is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.StoreId = storeId;
            }

            // to ensure "distributorId" is required (not null)
            if (distributorId == null)
            {
                throw new InvalidDataException("distributorId is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.DistributorId = distributorId;
            }

            // to ensure "orderSum" is required (not null)
            if (orderSum == null)
            {
                throw new InvalidDataException("orderSum is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.OrderSum = orderSum;
            }

            // to ensure "items" is required (not null)
            if (items == null)
            {
                throw new InvalidDataException("items is a required property for DetailedOrder and cannot be null");
            }
            else
            {
                this.Items = items;
            }

        }

        /// <summary>
        /// Gets or Sets OrderId
        /// </summary>
        [DataMember(Name="order_id", EmitDefaultValue=true)]
        public int OrderId { get; set; }

        /// <summary>
        /// Gets or Sets OrderCode
        /// </summary>
        [DataMember(Name="order_code", EmitDefaultValue=true)]
        public string OrderCode { get; set; }

        /// <summary>
        /// Gets or Sets DistributorOrderId
        /// </summary>
        [DataMember(Name="distributor_order_id", EmitDefaultValue=true)]
        public string DistributorOrderId { get; set; }

        /// <summary>
        /// Gets or Sets StatusDelivery
        /// </summary>
        [DataMember(Name="status_delivery", EmitDefaultValue=true)]
        public string StatusDelivery { get; set; }

        /// <summary>
        /// Gets or Sets OrderSumWithVat
        /// </summary>
        [DataMember(Name="order_sum_with_vat", EmitDefaultValue=true)]
        public decimal OrderSumWithVat { get; set; }

        /// <summary>
        /// Gets or Sets StatusPay
        /// </summary>
        [DataMember(Name="status_pay", EmitDefaultValue=true)]
        public string StatusPay { get; set; }

        /// <summary>
        /// Gets or Sets StoreId
        /// </summary>
        [DataMember(Name="store_id", EmitDefaultValue=true)]
        public int StoreId { get; set; }

        /// <summary>
        /// Gets or Sets DistributorId
        /// </summary>
        [DataMember(Name="distributor_id", EmitDefaultValue=true)]
        public int DistributorId { get; set; }

        /// <summary>
        /// Gets or Sets OrderSum
        /// </summary>
        [DataMember(Name="order_sum", EmitDefaultValue=true)]
        public decimal OrderSum { get; set; }

        /// <summary>
        /// Gets or Sets Items
        /// </summary>
        [DataMember(Name="items", EmitDefaultValue=true)]
        public List<OrderItem> Items { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedOrder {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  OrderCode: ").Append(OrderCode).Append("\n");
            sb.Append("  DistributorOrderId: ").Append(DistributorOrderId).Append("\n");
            sb.Append("  StatusDelivery: ").Append(StatusDelivery).Append("\n");
            sb.Append("  OrderSumWithVat: ").Append(OrderSumWithVat).Append("\n");
            sb.Append("  StatusPay: ").Append(StatusPay).Append("\n");
            sb.Append("  StoreId: ").Append(StoreId).Append("\n");
            sb.Append("  DistributorId: ").Append(DistributorId).Append("\n");
            sb.Append("  OrderSum: ").Append(OrderSum).Append("\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetailedOrder);
        }

        /// <summary>
        /// Returns true if DetailedOrder instances are equal
        /// </summary>
        /// <param name="input">Instance of DetailedOrder to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedOrder input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.OrderId == input.OrderId ||
                    (this.OrderId != null &&
                    this.OrderId.Equals(input.OrderId))
                ) && 
                (
                    this.OrderCode == input.OrderCode ||
                    (this.OrderCode != null &&
                    this.OrderCode.Equals(input.OrderCode))
                ) && 
                (
                    this.DistributorOrderId == input.DistributorOrderId ||
                    (this.DistributorOrderId != null &&
                    this.DistributorOrderId.Equals(input.DistributorOrderId))
                ) && 
                (
                    this.StatusDelivery == input.StatusDelivery ||
                    (this.StatusDelivery != null &&
                    this.StatusDelivery.Equals(input.StatusDelivery))
                ) && 
                (
                    this.OrderSumWithVat == input.OrderSumWithVat ||
                    (this.OrderSumWithVat != null &&
                    this.OrderSumWithVat.Equals(input.OrderSumWithVat))
                ) && 
                (
                    this.StatusPay == input.StatusPay ||
                    (this.StatusPay != null &&
                    this.StatusPay.Equals(input.StatusPay))
                ) && 
                (
                    this.StoreId == input.StoreId ||
                    (this.StoreId != null &&
                    this.StoreId.Equals(input.StoreId))
                ) && 
                (
                    this.DistributorId == input.DistributorId ||
                    (this.DistributorId != null &&
                    this.DistributorId.Equals(input.DistributorId))
                ) && 
                (
                    this.OrderSum == input.OrderSum ||
                    (this.OrderSum != null &&
                    this.OrderSum.Equals(input.OrderSum))
                ) && 
                (
                    this.Items == input.Items ||
                    this.Items != null &&
                    input.Items != null &&
                    this.Items.SequenceEqual(input.Items)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.OrderId != null)
                    hashCode = hashCode * 59 + this.OrderId.GetHashCode();
                if (this.OrderCode != null)
                    hashCode = hashCode * 59 + this.OrderCode.GetHashCode();
                if (this.DistributorOrderId != null)
                    hashCode = hashCode * 59 + this.DistributorOrderId.GetHashCode();
                if (this.StatusDelivery != null)
                    hashCode = hashCode * 59 + this.StatusDelivery.GetHashCode();
                if (this.OrderSumWithVat != null)
                    hashCode = hashCode * 59 + this.OrderSumWithVat.GetHashCode();
                if (this.StatusPay != null)
                    hashCode = hashCode * 59 + this.StatusPay.GetHashCode();
                if (this.StoreId != null)
                    hashCode = hashCode * 59 + this.StoreId.GetHashCode();
                if (this.DistributorId != null)
                    hashCode = hashCode * 59 + this.DistributorId.GetHashCode();
                if (this.OrderSum != null)
                    hashCode = hashCode * 59 + this.OrderSum.GetHashCode();
                if (this.Items != null)
                    hashCode = hashCode * 59 + this.Items.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {

            // OrderCode (string) minLength
            if(this.OrderCode != null && this.OrderCode.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for OrderCode, length must be greater than 1.", new [] { "OrderCode" });
            }


            // DistributorOrderId (string) minLength
            if(this.DistributorOrderId != null && this.DistributorOrderId.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DistributorOrderId, length must be greater than 1.", new [] { "DistributorOrderId" });
            }


            // StatusDelivery (string) minLength
            if(this.StatusDelivery != null && this.StatusDelivery.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StatusDelivery, length must be greater than 1.", new [] { "StatusDelivery" });
            }


            // StatusPay (string) minLength
            if(this.StatusPay != null && this.StatusPay.Length < 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for StatusPay, length must be greater than 1.", new [] { "StatusPay" });
            }

            yield break;
        }
    }

}
