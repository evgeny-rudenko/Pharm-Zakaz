/*
 * API для аптечных сетей
 *
 * Авторизация по токену, используйте заголовок          Authorization: Bearer токен         пример:          Authorization: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU          Для того чтобы работать с API через интерфейс swagger (ниже, по кнопке Try it out),         нажмите кнопку Authorize и укажите токен в формате Bearer токен.         Пример: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU 
 *
 * The version of the OpenAPI document: v2
 * Contact: info@pharm-zakaz.ru
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ProductList
    /// </summary>
    [DataContract]
    public partial class ProductList :  IEquatable<ProductList>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductList" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ProductList() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProductList" /> class.
        /// </summary>
        /// <param name="productList">productList (required).</param>
        /// <param name="detailedProductInfo">detailedProductInfo (required).</param>
        public ProductList(List<Product> productList = default(List<Product>), DetailedProduct detailedProductInfo = default(DetailedProduct))
        {
            // to ensure "productList" is required (not null)
            if (productList == null)
            {
                throw new InvalidDataException("productList is a required property for ProductList and cannot be null");
            }
            else
            {
                this._ProductList = productList;
            }

            // to ensure "detailedProductInfo" is required (not null)
            if (detailedProductInfo == null)
            {
                throw new InvalidDataException("detailedProductInfo is a required property for ProductList and cannot be null");
            }
            else
            {
                this.DetailedProductInfo = detailedProductInfo;
            }

        }

        /// <summary>
        /// Gets or Sets _ProductList
        /// </summary>
        [DataMember(Name="product_list", EmitDefaultValue=true)]
        public List<Product> _ProductList { get; set; }

        /// <summary>
        /// Gets or Sets DetailedProductInfo
        /// </summary>
        [DataMember(Name="detailed_product_info", EmitDefaultValue=true)]
        public DetailedProduct DetailedProductInfo { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductList {\n");
            sb.Append("  _ProductList: ").Append(_ProductList).Append("\n");
            sb.Append("  DetailedProductInfo: ").Append(DetailedProductInfo).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProductList);
        }

        /// <summary>
        /// Returns true if ProductList instances are equal
        /// </summary>
        /// <param name="input">Instance of ProductList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductList input)
        {
            if (input == null)
                return false;

            return 
                (
                    this._ProductList == input._ProductList ||
                    this._ProductList != null &&
                    input._ProductList != null &&
                    this._ProductList.SequenceEqual(input._ProductList)
                ) && 
                (
                    this.DetailedProductInfo == input.DetailedProductInfo ||
                    (this.DetailedProductInfo != null &&
                    this.DetailedProductInfo.Equals(input.DetailedProductInfo))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this._ProductList != null)
                    hashCode = hashCode * 59 + this._ProductList.GetHashCode();
                if (this.DetailedProductInfo != null)
                    hashCode = hashCode * 59 + this.DetailedProductInfo.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
