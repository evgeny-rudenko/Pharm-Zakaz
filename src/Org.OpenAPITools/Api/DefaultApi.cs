/*
 * API для аптечных сетей
 *
 * Авторизация по токену, используйте заголовок          Authorization: Bearer токен         пример:          Authorization: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU          Для того чтобы работать с API через интерфейс swagger (ниже, по кнопке Try it out),         нажмите кнопку Authorize и укажите токен в формате Bearer токен.         Пример: Bearer iJKLCJhbGciOiwIjoxN3MzM0zUw9zDuGk4-sYMmf9L_8WRU 
 *
 * The version of the OpenAPI document: v2
 * Contact: info@pharm-zakaz.ru
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Threading;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Получение списка дистрибьюторов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListDistributors</returns>
        ListDistributors DistributorsList ();

        /// <summary>
        /// Получение списка дистрибьюторов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListDistributors</returns>
        ApiResponse<ListDistributors> DistributorsListWithHttpInfo ();
        /// <summary>
        /// Размещение заказов в системе.
        /// </summary>
        /// <remarks>
        ///  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ResponseOrder</returns>
        ResponseOrder OrderCreate (CreateOrder data);

        /// <summary>
        /// Размещение заказов в системе.
        /// </summary>
        /// <remarks>
        ///  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ResponseOrder</returns>
        ApiResponse<ResponseOrder> OrderCreateWithHttpInfo (CreateOrder data);
        /// <summary>
        /// Получение детальной информации о заказе
        /// </summary>
        /// <remarks>
        /// Получение детальной информации о заказе
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DetailedOrder</returns>
        DetailedOrder OrderRead (string id);

        /// <summary>
        /// Получение детальной информации о заказе
        /// </summary>
        /// <remarks>
        /// Получение детальной информации о заказе
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DetailedOrder</returns>
        ApiResponse<DetailedOrder> OrderReadWithHttpInfo (string id);
        /// <summary>
        /// Получение списка заказов
        /// </summary>
        /// <remarks>
        ///  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <returns>Order</returns>
        Order OrdersList (int? orderId = default(int?));

        /// <summary>
        /// Получение списка заказов
        /// </summary>
        /// <remarks>
        ///  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        ApiResponse<Order> OrdersListWithHttpInfo (int? orderId = default(int?));
        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта
        /// </summary>
        /// <remarks>
        ///  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <returns>ProductList</returns>
        ProductList ProductsList (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?));

        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта
        /// </summary>
        /// <remarks>
        ///  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        ApiResponse<ProductList> ProductsListWithHttpInfo (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?));
        /// <summary>
        /// Получение списка аптек пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Store</returns>
        Store StoresList ();

        /// <summary>
        /// Получение списка аптек пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Store</returns>
        ApiResponse<Store> StoresListWithHttpInfo ();
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Получение списка дистрибьюторов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListDistributors</returns>
        System.Threading.Tasks.Task<ListDistributors> DistributorsListAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Получение списка дистрибьюторов
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListDistributors)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDistributors>> DistributorsListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Размещение заказов в системе.
        /// </summary>
        /// <remarks>
        ///  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseOrder</returns>
        System.Threading.Tasks.Task<ResponseOrder> OrderCreateAsync (CreateOrder data, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Размещение заказов в системе.
        /// </summary>
        /// <remarks>
        ///  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<ResponseOrder>> OrderCreateWithHttpInfoAsync (CreateOrder data, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Получение детальной информации о заказе
        /// </summary>
        /// <remarks>
        /// Получение детальной информации о заказе
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DetailedOrder</returns>
        System.Threading.Tasks.Task<DetailedOrder> OrderReadAsync (string id, CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Получение детальной информации о заказе
        /// </summary>
        /// <remarks>
        /// Получение детальной информации о заказе
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DetailedOrder)</returns>
        System.Threading.Tasks.Task<ApiResponse<DetailedOrder>> OrderReadWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Получение списка заказов
        /// </summary>
        /// <remarks>
        ///  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Order</returns>
        System.Threading.Tasks.Task<Order> OrdersListAsync (int? orderId = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Получение списка заказов
        /// </summary>
        /// <remarks>
        ///  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Order)</returns>
        System.Threading.Tasks.Task<ApiResponse<Order>> OrdersListWithHttpInfoAsync (int? orderId = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта
        /// </summary>
        /// <remarks>
        ///  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProductList</returns>
        System.Threading.Tasks.Task<ProductList> ProductsListAsync (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?), CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта
        /// </summary>
        /// <remarks>
        ///  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ProductList>> ProductsListWithHttpInfoAsync (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?), CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Получение списка аптек пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Store</returns>
        System.Threading.Tasks.Task<Store> StoresListAsync (CancellationToken cancellationToken = default(CancellationToken));

        /// <summary>
        /// Получение списка аптек пользователя
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Store)</returns>
        System.Threading.Tasks.Task<ApiResponse<Store>> StoresListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// </summary>
        /// <returns></returns>
        public DefaultApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Получение списка дистрибьюторов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ListDistributors</returns>
        public ListDistributors DistributorsList ()
        {
             ApiResponse<ListDistributors> localVarResponse = DistributorsListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка дистрибьюторов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of ListDistributors</returns>
        public ApiResponse<ListDistributors> DistributorsListWithHttpInfo ()
        {

            var localVarPath = "/distributors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributorsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDistributors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListDistributors) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDistributors)));
        }

        /// <summary>
        /// Получение списка дистрибьюторов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ListDistributors</returns>
        public async System.Threading.Tasks.Task<ListDistributors> DistributorsListAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ListDistributors> localVarResponse = await DistributorsListWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка дистрибьюторов 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ListDistributors)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ListDistributors>> DistributorsListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/distributors/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DistributorsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ListDistributors>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ListDistributors) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ListDistributors)));
        }

        /// <summary>
        /// Размещение заказов в системе.  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ResponseOrder</returns>
        public ResponseOrder OrderCreate (CreateOrder data)
        {
             ApiResponse<ResponseOrder> localVarResponse = OrderCreateWithHttpInfo(data);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Размещение заказов в системе.  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <returns>ApiResponse of ResponseOrder</returns>
        public ApiResponse<ResponseOrder> OrderCreateWithHttpInfo (CreateOrder data)
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->OrderCreate");

            var localVarPath = "/order/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOrder)));
        }

        /// <summary>
        /// Размещение заказов в системе.  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ResponseOrder</returns>
        public async System.Threading.Tasks.Task<ResponseOrder> OrderCreateAsync (CreateOrder data, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ResponseOrder> localVarResponse = await OrderCreateWithHttpInfoAsync(data, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Размещение заказов в системе.  Размещение заказов в системе. Минимальная сумма заказа с НДС 3000. Количество товаров в заказе может быть сниженно при недостатке его на складе, данные препараты будут помечены как отложенные в ответе. Тело запроса в формате json. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="data"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ResponseOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ResponseOrder>> OrderCreateWithHttpInfoAsync (CreateOrder data, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'data' is set
            if (data == null)
                throw new ApiException(400, "Missing required parameter 'data' when calling DefaultApi->OrderCreate");

            var localVarPath = "/order/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (data != null && data.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(data); // http body (model) parameter
            }
            else
            {
                localVarPostBody = data; // byte array
            }

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ResponseOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ResponseOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ResponseOrder)));
        }

        /// <summary>
        /// Получение детальной информации о заказе Получение детальной информации о заказе
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>DetailedOrder</returns>
        public DetailedOrder OrderRead (string id)
        {
             ApiResponse<DetailedOrder> localVarResponse = OrderReadWithHttpInfo(id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение детальной информации о заказе Получение детальной информации о заказе
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of DetailedOrder</returns>
        public ApiResponse<DetailedOrder> OrderReadWithHttpInfo (string id)
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->OrderRead");

            var localVarPath = "/order/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetailedOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedOrder)));
        }

        /// <summary>
        /// Получение детальной информации о заказе Получение детальной информации о заказе
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of DetailedOrder</returns>
        public async System.Threading.Tasks.Task<DetailedOrder> OrderReadAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<DetailedOrder> localVarResponse = await OrderReadWithHttpInfoAsync(id, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение детальной информации о заказе Получение детальной информации о заказе
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (DetailedOrder)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DetailedOrder>> OrderReadWithHttpInfoAsync (string id, CancellationToken cancellationToken = default(CancellationToken))
        {
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling DefaultApi->OrderRead");

            var localVarPath = "/order/{id}/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrderRead", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DetailedOrder>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (DetailedOrder) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(DetailedOrder)));
        }

        /// <summary>
        /// Получение списка заказов  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <returns>Order</returns>
        public Order OrdersList (int? orderId = default(int?))
        {
             ApiResponse<Order> localVarResponse = OrdersListWithHttpInfo(orderId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка заказов  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <returns>ApiResponse of Order</returns>
        public ApiResponse<Order> OrdersListWithHttpInfo (int? orderId = default(int?))
        {

            var localVarPath = "/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrdersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Получение списка заказов  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Order</returns>
        public async System.Threading.Tasks.Task<Order> OrdersListAsync (int? orderId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Order> localVarResponse = await OrdersListWithHttpInfoAsync(orderId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка заказов  Чтобы получить детальную информацию о заказе, необходимо передать order_id в качестве query параметра.  Возможные значения status_delivery: new: Новый,  equipped: Укомплектован,  confirmed: Подтвержден,  assembly: Передан на сборку, blocked: Заблокирован,  sent: Отправлен,  delivered: Доставлен,  refund: Возврат,  canceled: Отменен.  Возможные значения status_pay:  paid: Оплачен,  expected: Ожидается,  due: Просрочен 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="orderId">id заказа (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Order)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Order>> OrdersListWithHttpInfoAsync (int? orderId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/orders/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (orderId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "order_id", orderId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("OrdersList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Order>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Order) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Order)));
        }

        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <returns>ProductList</returns>
        public ProductList ProductsList (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?))
        {
             ApiResponse<ProductList> localVarResponse = ProductsListWithHttpInfo(storeId, uniqueId, distributorId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <returns>ApiResponse of ProductList</returns>
        public ApiResponse<ProductList> ProductsListWithHttpInfo (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?))
        {

            var localVarPath = "/products/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "store_id", storeId)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unique_id", uniqueId)); // query parameter
            if (distributorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distributor_id", distributorId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductList)));
        }

        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ProductList</returns>
        public async System.Threading.Tasks.Task<ProductList> ProductsListAsync (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<ProductList> localVarResponse = await ProductsListWithHttpInfoAsync(storeId, uniqueId, distributorId, cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка доступных продуктов по id аптеки, id дистрибьютора и id продукта  Получение списка доступных продуктов по id аптеки, передаваемого как query параметра store_id, при передаче дополнительно query параметра distributor_id, список будет отфильтрован по требуемому дистрибьютору. Получение детальной информации о продукте, при передаче уникального id(получается из списка доступных продуктов) как query параметра unique_id.  Внимание! Доступные дистрибьюторы: id=1: Фармкомплект,  id=2: Протек  Поле price отображает цену товара без НДС, Поле price_with_VAT отображает цену товара, включая НДС, Поле potential_price_with_offers отображает потенциальную цену с учётом акций, руб.  
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="storeId">id аптеки. Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="uniqueId">id продукта (получается из списка доступных продуктов).  Можно указать либо store_id либо unique_id. Оба параметра указывать недопустимо (optional)</param>
        /// <param name="distributorId">id дистрибьютора (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (ProductList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ProductList>> ProductsListWithHttpInfoAsync (int? storeId = default(int?), string uniqueId = default(string), int? distributorId = default(int?), CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/products/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (storeId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "store_id", storeId)); // query parameter
            if (uniqueId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "unique_id", uniqueId)); // query parameter
            if (distributorId != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "distributor_id", distributorId)); // query parameter

            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ProductsList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ProductList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (ProductList) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(ProductList)));
        }

        /// <summary>
        /// Получение списка аптек пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Store</returns>
        public Store StoresList ()
        {
             ApiResponse<Store> localVarResponse = StoresListWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Получение списка аптек пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of Store</returns>
        public ApiResponse<Store> StoresListWithHttpInfo ()
        {

            var localVarPath = "/stores/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoresList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Store) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

        /// <summary>
        /// Получение списка аптек пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of Store</returns>
        public async System.Threading.Tasks.Task<Store> StoresListAsync (CancellationToken cancellationToken = default(CancellationToken))
        {
             ApiResponse<Store> localVarResponse = await StoresListWithHttpInfoAsync(cancellationToken);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Получение списка аптек пользователя 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel request (optional) </param>
        /// <returns>Task of ApiResponse (Store)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Store>> StoresListWithHttpInfoAsync (CancellationToken cancellationToken = default(CancellationToken))
        {

            var localVarPath = "/stores/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (Bearer) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = this.Configuration.GetApiKeyWithPrefix("Authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType, cancellationToken);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StoresList", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Store>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (Store) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Store)));
        }

    }
}
